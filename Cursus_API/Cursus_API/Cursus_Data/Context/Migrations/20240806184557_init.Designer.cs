// <auto-generated />
using System;
using Cursus_Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cursus_Data.Context.Migrations
{
    [DbContext(typeof(LMS_CursusDbContext))]
    [Migration("20240806184557_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cursus_Data.Models.Entities.Bank", b =>
                {
                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Bookmark", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookmarkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookmarkedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Bookmark", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("CourseId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = "CT0001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A modern, object-oriented programming language developed by Microsoft.",
                            IsDelete = false,
                            Name = "C#",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0002",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A high-level, class-based, object-oriented programming language.",
                            IsDelete = false,
                            Name = "Java",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 2, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0003",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An interpreted, high-level, general-purpose programming language.",
                            IsDelete = false,
                            Name = "Python",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 3, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0004",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the C programming language.",
                            IsDelete = false,
                            Name = "C++",
                            ParentId = "CT0005",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the C programming language.",
                            IsDelete = false,
                            Name = "C",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0006",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the C programming language.",
                            IsDelete = false,
                            Name = "Go",
                            ParentId = "CT0004",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0007",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "Java Spring boost",
                            ParentId = "CT0002",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0008",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "Java themleaf",
                            ParentId = "CT0002",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0009",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "NodeJs",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0010",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "ReactJs",
                            ParentId = "CT0009",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0011",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "ReactJs Native",
                            ParentId = "CT0010",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = "CT0012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A general-purpose programming language created as an extension of the Java programming language.",
                            IsDelete = false,
                            Name = "ReactJs Native Child",
                            ParentId = "CT0011",
                            Status = "Active",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2023, 1, 4, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AssignNumber")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CourseRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            CourseId = "CS0001",
                            AssignNumber = 0,
                            CategoryId = "CT0001",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "C# Programming Basics"
                        },
                        new
                        {
                            CourseId = "CS0002",
                            AssignNumber = 0,
                            CategoryId = "CT0002",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Java Fundamentals"
                        },
                        new
                        {
                            CourseId = "CS0003",
                            AssignNumber = 0,
                            CategoryId = "CT0003",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Python for Beginners"
                        },
                        new
                        {
                            CourseId = "CS0004",
                            AssignNumber = 0,
                            CategoryId = "CT0004",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Advanced C++ Programming"
                        },
                        new
                        {
                            CourseId = "CS0005",
                            AssignNumber = 0,
                            CategoryId = "CT0001",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Advanced C# Topics"
                        },
                        new
                        {
                            CourseId = "CS0006",
                            AssignNumber = 0,
                            CategoryId = "CT0002",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Java Spring Framework"
                        },
                        new
                        {
                            CourseId = "CS0007",
                            AssignNumber = 0,
                            CategoryId = "CT0003",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Intermediate Python"
                        },
                        new
                        {
                            CourseId = "CS0008",
                            AssignNumber = 0,
                            CategoryId = "CT0004",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Object-Oriented Design in C++"
                        },
                        new
                        {
                            CourseId = "CS0009",
                            AssignNumber = 0,
                            CategoryId = "CT0005",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Introduction to C Programming"
                        },
                        new
                        {
                            CourseId = "CS0010",
                            AssignNumber = 0,
                            CategoryId = "CT0006",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Concurrency in Go"
                        },
                        new
                        {
                            CourseId = "CS0011",
                            AssignNumber = 0,
                            CategoryId = "CT0007",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Spring Boot Essentials"
                        },
                        new
                        {
                            CourseId = "CS0012",
                            AssignNumber = 0,
                            CategoryId = "CT0008",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Thymeleaf Framework"
                        },
                        new
                        {
                            CourseId = "CS0013",
                            AssignNumber = 0,
                            CategoryId = "CT0009",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Node.js Basics"
                        },
                        new
                        {
                            CourseId = "CS0014",
                            AssignNumber = 0,
                            CategoryId = "CT0010",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "React.js Fundamentals"
                        },
                        new
                        {
                            CourseId = "CS0015",
                            AssignNumber = 0,
                            CategoryId = "CT0011",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "React Native Development"
                        },
                        new
                        {
                            CourseId = "CS0016",
                            AssignNumber = 0,
                            CategoryId = "CT0012",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Advanced React Native Topics"
                        },
                        new
                        {
                            CourseId = "CS0017",
                            AssignNumber = 0,
                            CategoryId = "CT0001",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Intermediate C# Programming"
                        },
                        new
                        {
                            CourseId = "CS0018",
                            AssignNumber = 0,
                            CategoryId = "CT0002",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Java EE Development"
                        },
                        new
                        {
                            CourseId = "CS0019",
                            AssignNumber = 0,
                            CategoryId = "CT0003",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Python Data Analysis"
                        },
                        new
                        {
                            CourseId = "CS0020",
                            AssignNumber = 0,
                            CategoryId = "CT0004",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Advanced C++ Techniques"
                        },
                        new
                        {
                            CourseId = "CS0021",
                            AssignNumber = 0,
                            CategoryId = "CT0005",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "C Programming for Embedded Systems"
                        },
                        new
                        {
                            CourseId = "CS0022",
                            AssignNumber = 0,
                            CategoryId = "CT0006",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Go Web Development"
                        },
                        new
                        {
                            CourseId = "CS0023",
                            AssignNumber = 0,
                            CategoryId = "CT0007",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "Spring Boot Microservices"
                        },
                        new
                        {
                            CourseId = "CS0024",
                            AssignNumber = 0,
                            CategoryId = "CT0008",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Thymeleaf for Web Development"
                        },
                        new
                        {
                            CourseId = "CS0025",
                            AssignNumber = 0,
                            CategoryId = "CT0009",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "RESTful APIs with Node.js"
                        },
                        new
                        {
                            CourseId = "CS0026",
                            AssignNumber = 0,
                            CategoryId = "CT0010",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "React.js State Management"
                        },
                        new
                        {
                            CourseId = "CS0027",
                            AssignNumber = 0,
                            CategoryId = "CT0011",
                            CourseRating = 0m,
                            InstructorId = "INS00000001",
                            Title = "Advanced React Native UI Design"
                        },
                        new
                        {
                            CourseId = "CS0028",
                            AssignNumber = 0,
                            CategoryId = "CT0012",
                            CourseRating = 0m,
                            InstructorId = "INS00000002",
                            Title = "React Native App Deployment"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseComment", b =>
                {
                    b.Property<int>("CourseCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseCommentId"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsComment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<int>("ToCourseVersionId")
                        .HasColumnType("int");

                    b.HasKey("CourseCommentId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToCourseVersionId");

                    b.ToTable("CourseComment", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseContent", b =>
                {
                    b.Property<string>("CourseContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseVersionDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseContentId");

                    b.HasIndex("CourseVersionDetailId");

                    b.ToTable("CourseContent", (string)null);

                    b.HasData(
                        new
                        {
                            CourseContentId = "CC00000001",
                            CourseVersionDetailId = "CVD0008",
                            CreatedBy = "INS00000001",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8882),
                            IsDelete = false,
                            Time = 2.0,
                            Title = "Introduction",
                            Type = "Document",
                            UpdatedBy = "INS00000001",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8883),
                            Url = "Link file"
                        },
                        new
                        {
                            CourseContentId = "CC00000002",
                            CourseVersionDetailId = "CVD0008",
                            CreatedBy = "INS00000001",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8885),
                            IsDelete = false,
                            Time = 2.0,
                            Title = "Introduction",
                            Type = "Video",
                            UpdatedBy = "INS00000001",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8885),
                            Url = "Link file"
                        },
                        new
                        {
                            CourseContentId = "CC00000003",
                            CourseVersionDetailId = "CVD0008",
                            CreatedBy = "INS00000001",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8887),
                            IsDelete = false,
                            Time = 2.0,
                            Title = "Introduction",
                            Type = "Silde",
                            UpdatedBy = "INS00000001",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8887),
                            Url = "Link file"
                        },
                        new
                        {
                            CourseContentId = "CC00000004",
                            CourseVersionDetailId = "CVD0009",
                            CreatedBy = "INS00000001",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8889),
                            IsDelete = false,
                            Time = 2.0,
                            Title = "Introduction",
                            Type = "Silde",
                            UpdatedBy = "INS00000001",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8889),
                            Url = "Link file"
                        },
                        new
                        {
                            CourseContentId = "CC00000005",
                            CourseVersionDetailId = "CVD0009",
                            CreatedBy = "INS00000001",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8891),
                            IsDelete = false,
                            Time = 2.0,
                            Title = "Introduction",
                            Type = "Silde",
                            UpdatedBy = "INS00000001",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8891),
                            Url = "Link file"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseRating", b =>
                {
                    b.Property<int>("CourseRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseRatingId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ToCourseVersionId")
                        .HasColumnType("int");

                    b.HasKey("CourseRatingId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToCourseVersionId");

                    b.ToTable("CourseRating", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersion", b =>
                {
                    b.Property<int>("CourseVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseVersionId"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MaintainDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("CourseVersionId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseVersion", (string)null);

                    b.HasData(
                        new
                        {
                            CourseVersionId = 1,
                            CourseId = "CS0001",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 2,
                            CourseId = "CS0002",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 3,
                            CourseId = "CS0003",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 4,
                            CourseId = "CS0004",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 5,
                            CourseId = "CS0005",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 6,
                            CourseId = "CS0006",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 7,
                            CourseId = "CS0007",
                            IsApproved = true,
                            IsUsed = false,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 8,
                            CourseId = "CS0001",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 9,
                            CourseId = "CS0002",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 10,
                            CourseId = "CS0003",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 11,
                            CourseId = "CS0004",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 12,
                            CourseId = "CS0005",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 13,
                            CourseId = "CS0006",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 14,
                            CourseId = "CS0007",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.02m
                        },
                        new
                        {
                            CourseVersionId = 15,
                            CourseId = "CS0008",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 16,
                            CourseId = "CS0009",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 17,
                            CourseId = "CS0010",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 18,
                            CourseId = "CS0011",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 19,
                            CourseId = "CS0012",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 20,
                            CourseId = "CS0013",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 21,
                            CourseId = "CS0014",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 22,
                            CourseId = "CS0015",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 23,
                            CourseId = "CS0016",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 24,
                            CourseId = "CS0017",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 25,
                            CourseId = "CS0018",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 26,
                            CourseId = "CS0019",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 27,
                            CourseId = "CS0020",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 28,
                            CourseId = "CS0021",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 29,
                            CourseId = "CS0022",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 30,
                            CourseId = "CS0023",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 31,
                            CourseId = "CS0024",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 32,
                            CourseId = "CS0025",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 33,
                            CourseId = "CS0026",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 34,
                            CourseId = "CS0027",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        },
                        new
                        {
                            CourseVersionId = 35,
                            CourseId = "CS0028",
                            IsApproved = true,
                            IsUsed = true,
                            Status = "Activate",
                            Version = 1.01m
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersionDetail", b =>
                {
                    b.Property<string>("CourseVersionDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlreadyEnrolled")
                        .HasColumnType("int");

                    b.Property<string>("CourseLearningTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseVersionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseVersionDetailId");

                    b.HasIndex("CourseVersionId")
                        .IsUnique();

                    b.ToTable("CourseVersionDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CourseVersionDetailId = "CVD0001",
                            AlreadyEnrolled = 12,
                            CourseLearningTime = "10 hours",
                            CourseVersionId = 1,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 100000.0,
                            Rating = 4.0m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0002",
                            AlreadyEnrolled = 10,
                            CourseLearningTime = "20 hours",
                            CourseVersionId = 2,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 200000.0,
                            Rating = 1.1m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0003",
                            AlreadyEnrolled = 30,
                            CourseLearningTime = "30 hours",
                            CourseVersionId = 3,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 25000.0,
                            Rating = 3.2m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0004",
                            AlreadyEnrolled = 400,
                            CourseLearningTime = "40 hours",
                            CourseVersionId = 4,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 30000.0,
                            Rating = 5.0m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0005",
                            AlreadyEnrolled = 120,
                            CourseLearningTime = "50 hours",
                            CourseVersionId = 5,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 40000.0,
                            Rating = 4.8m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0006",
                            AlreadyEnrolled = 50,
                            CourseLearningTime = "60 hours",
                            CourseVersionId = 6,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 20000.0,
                            Rating = 2.5m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0007",
                            AlreadyEnrolled = 83,
                            CourseLearningTime = "70 hours",
                            CourseVersionId = 7,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 70000.0,
                            Rating = 2.7m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0008",
                            AlreadyEnrolled = 182,
                            CourseLearningTime = "60 hours",
                            CourseVersionId = 8,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 90000.0,
                            Rating = 4.5m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0009",
                            AlreadyEnrolled = 53,
                            CourseLearningTime = "70 hours",
                            CourseVersionId = 9,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 33000.0,
                            Rating = 3.7m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0010",
                            AlreadyEnrolled = 95,
                            CourseLearningTime = "15 hours",
                            CourseVersionId = 10,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 29.989999999999998,
                            Rating = 4.2m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0011",
                            AlreadyEnrolled = 72,
                            CourseLearningTime = "25 hours",
                            CourseVersionId = 11,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 39.990000000000002,
                            Rating = 3.5m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0012",
                            AlreadyEnrolled = 150,
                            CourseLearningTime = "35 hours",
                            CourseVersionId = 12,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 49.990000000000002,
                            Rating = 4.8m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0013",
                            AlreadyEnrolled = 220,
                            CourseLearningTime = "45 hours",
                            CourseVersionId = 13,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 59.990000000000002,
                            Rating = 3.9m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0014",
                            AlreadyEnrolled = 40,
                            CourseLearningTime = "55 hours",
                            CourseVersionId = 14,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 69.989999999999995,
                            Rating = 2.1m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0015",
                            AlreadyEnrolled = 180,
                            CourseLearningTime = "65 hours",
                            CourseVersionId = 15,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 79.989999999999995,
                            Rating = 4.6m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0016",
                            AlreadyEnrolled = 90,
                            CourseLearningTime = "75 hours",
                            CourseVersionId = 16,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 89.989999999999995,
                            Rating = 3.2m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0017",
                            AlreadyEnrolled = 300,
                            CourseLearningTime = "85 hours",
                            CourseVersionId = 17,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 99.989999999999995,
                            Rating = 4.9m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0018",
                            AlreadyEnrolled = 110,
                            CourseLearningTime = "95 hours",
                            CourseVersionId = 18,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 109.98999999999999,
                            Rating = 3.8m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0019",
                            AlreadyEnrolled = 60,
                            CourseLearningTime = "105 hours",
                            CourseVersionId = 19,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 119.98999999999999,
                            Rating = 2.7m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0020",
                            AlreadyEnrolled = 250,
                            CourseLearningTime = "115 hours",
                            CourseVersionId = 20,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 129.99000000000001,
                            Rating = 4.5m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0021",
                            AlreadyEnrolled = 95,
                            CourseLearningTime = "125 hours",
                            CourseVersionId = 21,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 139.99000000000001,
                            Rating = 3.1m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0022",
                            AlreadyEnrolled = 180,
                            CourseLearningTime = "135 hours",
                            CourseVersionId = 22,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 149.99000000000001,
                            Rating = 4.2m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0023",
                            AlreadyEnrolled = 70,
                            CourseLearningTime = "145 hours",
                            CourseVersionId = 23,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 159.99000000000001,
                            Rating = 2.8m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0024",
                            AlreadyEnrolled = 300,
                            CourseLearningTime = "155 hours",
                            CourseVersionId = 24,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 169.99000000000001,
                            Rating = 4.7m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0025",
                            AlreadyEnrolled = 130,
                            CourseLearningTime = "165 hours",
                            CourseVersionId = 25,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 179.99000000000001,
                            Rating = 3.5m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0026",
                            AlreadyEnrolled = 400,
                            CourseLearningTime = "175 hours",
                            CourseVersionId = 26,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 189.99000000000001,
                            Rating = 4.9m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0027",
                            AlreadyEnrolled = 210,
                            CourseLearningTime = "185 hours",
                            CourseVersionId = 27,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 199.99000000000001,
                            Rating = 3.9m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0028",
                            AlreadyEnrolled = 90,
                            CourseLearningTime = "195 hours",
                            CourseVersionId = 28,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 209.99000000000001,
                            Rating = 2.6m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0029",
                            AlreadyEnrolled = 240,
                            CourseLearningTime = "205 hours",
                            CourseVersionId = 29,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 219.99000000000001,
                            Rating = 4.3m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0030",
                            AlreadyEnrolled = 150,
                            CourseLearningTime = "215 hours",
                            CourseVersionId = 30,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 229.99000000000001,
                            Rating = 3.7m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0031",
                            AlreadyEnrolled = 80,
                            CourseLearningTime = "225 hours",
                            CourseVersionId = 31,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 239.99000000000001,
                            Rating = 2.9m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0032",
                            AlreadyEnrolled = 310,
                            CourseLearningTime = "235 hours",
                            CourseVersionId = 32,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 249.99000000000001,
                            Rating = 4.6m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0033",
                            AlreadyEnrolled = 120,
                            CourseLearningTime = "245 hours",
                            CourseVersionId = 33,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 259.99000000000001,
                            Rating = 3.4m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0034",
                            AlreadyEnrolled = 280,
                            CourseLearningTime = "255 hours",
                            CourseVersionId = 34,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 269.99000000000001,
                            Rating = 4.8m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseVersionDetailId = "CVD0035",
                            AlreadyEnrolled = 200,
                            CourseLearningTime = "265 hours",
                            CourseVersionId = 35,
                            CreatedBy = "LDQ",
                            CreatedDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Course description here",
                            IsDelete = false,
                            OldPrice = 0.0,
                            Price = 279.99000000000001,
                            Rating = 3.3m,
                            UpdatedBy = "LDQ",
                            UpdatedDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersionEmail", b =>
                {
                    b.Property<int>("CourseVersionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseVersionId", "EmailTemplateId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("CourseVersionEmail", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            EmailTemplateId = 1,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>You have a new notification:</p>\r\n                    <p>{{NotificationMessage}}</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9183),
                            IsDelete = false,
                            Subject = "You Have a New Notification",
                            Type = "Notification",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9184)
                        },
                        new
                        {
                            EmailTemplateId = 2,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>We received a request to reset your password. Click the link below to reset your password:</p>\r\n                    <p><a href='{{ResetLink}}'>Reset Password</a></p>\r\n                    <p>If you did not request a password reset, please ignore this email.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9186),
                            IsDelete = false,
                            Subject = "Password Reset Request",
                            Type = "ForgetPassword",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9187)
                        },
                        new
                        {
                            EmailTemplateId = 3,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your password has been successfully reset. You can now log in with your new password.</p>\r\n                    <p>If you did not request this change, please contact our support team immediately.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9188),
                            IsDelete = false,
                            Subject = "Your Password Has Been Reset",
                            Type = "ResetPassword",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9188)
                        },
                        new
                        {
                            EmailTemplateId = 4,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Thank you for registering with us. Please confirm your account by clicking the link below:</p>\r\n                    <p><a href='{{ConfirmationLink}}'>Confirm Account</a></p>\r\n                    <p>If you did not register, please ignore this email.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9189),
                            IsDelete = false,
                            Subject = "Account Confirmation",
                            Type = "ConfirmationAccount",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9190)
                        },
                        new
                        {
                            EmailTemplateId = 5,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>We regret to inform you that your course titled '{{CourseTitle}}' has been rejected for the following reason:</p>\r\n                    <p>{{RejectionReason}}</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9191),
                            IsDelete = false,
                            Subject = "Course Rejection Notification",
                            Type = "RejectCourse",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9192)
                        },
                        new
                        {
                            EmailTemplateId = 6,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Congratulations! Your course titled '{{CourseTitle}}' has been approved and is now live.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9193),
                            IsDelete = false,
                            Subject = "Course Approval Notification",
                            Type = "ApproveCourse",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9193)
                        },
                        new
                        {
                            EmailTemplateId = 7,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your account has been successfully activated. You can now log in and start using our services.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9194),
                            IsDelete = false,
                            Subject = "Account Activation",
                            Type = "ActivateUser",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9195)
                        },
                        new
                        {
                            EmailTemplateId = 8,
                            Body = "\r\n                <html>\r\n                <body>\r\n                    <p>Hello {{UserName}},</p>\r\n                    <p>Your account has been deactivated. If you think this is a mistake, please contact our support team.</p>\r\n                    <p>Best regards,<br>Your Company</p>\r\n                </body>\r\n                </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9196),
                            IsDelete = false,
                            Subject = "Account Deactivation",
                            Type = "DeactivateUser",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9196)
                        },
                        new
                        {
                            EmailTemplateId = 9,
                            Body = "\r\n            <html>\r\n            <body>\r\n                <p>Dear {{UserName}},</p>\r\n                <p>We are pleased to inform you that your course titled <strong>'{{CourseTitle}}'</strong> has been successfully reactivated after the maintenance period.</p>\r\n                \r\n                <p>We appreciate your patience and understanding during this time. If you have any questions or need further assistance, please feel free to reach out to us.</p>\r\n                \r\n                <p>Best regards,<br>\r\n                The [Your Company] Team</p>\r\n            </body>\r\n            </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9198),
                            IsDelete = false,
                            Subject = "Course Activation Notification",
                            Type = "ActivateCourse",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9198)
                        },
                        new
                        {
                            EmailTemplateId = 10,
                            Body = "\r\n            <html>\r\n            <body>\r\n                <p>Hello {{UserName}},</p>\r\n                <p>Your course titled '{{CourseTitle}}' has been deactivated.</p>\r\n                <p>Reason for deactivation: {{DeactivationReason}}</p>\r\n                {{#if Duration}}\r\n                <p>Duration: {{Duration}}</p>\r\n                {{/if}}\r\n                <p>Best regards,<br>Your Company</p>\r\n            </body>\r\n            </html>",
                            CreateBy = "System",
                            CreateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9200),
                            IsDelete = false,
                            Subject = "Course Deactivation Notification",
                            Type = "DeactivateCourse",
                            UpdateBy = "System",
                            UpdateDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(9200)
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EnrollCourse", b =>
                {
                    b.Property<string>("EnrollCourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndEnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Process")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartEnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EnrollCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("EnrollCourse", (string)null);

                    b.HasData(
                        new
                        {
                            EnrollCourseId = "EC00000001",
                            CourseId = "CS0001",
                            CourseVersionId = 8,
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8967),
                            EndEnrollDate = new DateTime(2024, 8, 12, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8962),
                            Process = 0.0,
                            StartEnrollDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8961),
                            Status = "Enrolled",
                            UserId = "US00000005"
                        },
                        new
                        {
                            EnrollCourseId = "EC00000002",
                            CourseId = "CS0002",
                            CourseVersionId = 9,
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8972),
                            EndEnrollDate = new DateTime(2024, 8, 12, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8971),
                            Process = 0.0,
                            StartEnrollDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8971),
                            Status = "Enrolled",
                            UserId = "US00000005"
                        },
                        new
                        {
                            EnrollCourseId = "EC00000003",
                            CourseId = "CS0002",
                            CourseVersionId = 9,
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8974),
                            EndEnrollDate = new DateTime(2024, 8, 12, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8974),
                            Process = 0.0,
                            StartEnrollDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8973),
                            Status = "Enrolled",
                            UserId = "US00000006"
                        },
                        new
                        {
                            EnrollCourseId = "EC00000004",
                            CourseId = "CS0001",
                            CourseVersionId = 8,
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8977),
                            EndEnrollDate = new DateTime(2024, 8, 12, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8976),
                            Process = 0.0,
                            StartEnrollDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8976),
                            Status = "Enrolled",
                            UserId = "US00000008"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.FinancialTransactions", b =>
                {
                    b.Property<int>("FTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FTID"));

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Withdraw")
                        .HasColumnType("float");

                    b.Property<double>("Withdrawal")
                        .HasColumnType("float");

                    b.HasKey("FTID");

                    b.ToTable("FinancialTransactions", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseVersionDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("CourseVersionDetailId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Instructor", b =>
                {
                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructor", (string)null);

                    b.HasData(
                        new
                        {
                            InstructorId = "INS00000001",
                            CardName = "CardName1",
                            CardNumber = "Card001",
                            CardProvider = "CardProvider1",
                            Certification = "Certification1",
                            IsAccepted = true,
                            TaxNumber = "Tax001",
                            UserId = "US00000003"
                        },
                        new
                        {
                            InstructorId = "INS00000002",
                            CardName = "CardName2",
                            CardNumber = "Card002",
                            CardProvider = "CardProvider2",
                            Certification = "Certification2",
                            IsAccepted = true,
                            TaxNumber = "Tax002",
                            UserId = "US00000004"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemId");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoke")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Student"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Instructor"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.SystemTransaction", b =>
                {
                    b.Property<Guid>("StId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StId");

                    b.ToTable("SystemTransaction", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGoogleAccount")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = "US00000001",
                            Email = "admin1@gmail.com",
                            FullName = "Admin 1",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111111",
                            RoleID = 3
                        },
                        new
                        {
                            UserID = "US00000002",
                            Email = "admin2@gmail.com",
                            FullName = "Admin 2",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84222222222",
                            RoleID = 3
                        },
                        new
                        {
                            UserID = "US00000003",
                            Email = "instructor1@gmail.com",
                            FullName = "Ins1",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111113",
                            RoleID = 2
                        },
                        new
                        {
                            UserID = "US00000004",
                            Email = "instructor2@gmail.com",
                            FullName = "Ins2",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111114",
                            RoleID = 2
                        },
                        new
                        {
                            UserID = "US00000005",
                            Email = "student1@gmail.com",
                            FullName = "Stu1",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111114",
                            RoleID = 1
                        },
                        new
                        {
                            UserID = "US00000006",
                            Email = "student2@gmail.com",
                            FullName = "Stu2",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111114",
                            RoleID = 1
                        },
                        new
                        {
                            UserID = "US00000007",
                            Email = "student3@gmail.com",
                            FullName = "Stu3",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111114",
                            RoleID = 1
                        },
                        new
                        {
                            UserID = "US00000008",
                            Email = "quocthangjk@gmail.com",
                            FullName = "Stu4",
                            IsBan = false,
                            IsDelete = false,
                            IsGoogleAccount = false,
                            IsMailConfirmed = true,
                            Password = "ee77430e13b232f2e054ab0f5a281019bb81d76e7f8bb18bf96fdd0a242d72ef",
                            Phone = "+84111111114",
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserBehavior", b =>
                {
                    b.Property<int>("UserBehaviorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBehaviorId"));

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date3")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserBehaviorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBehavior", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserComment", b =>
                {
                    b.Property<int>("UserCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCommentId"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<string>("ToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCommentId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserComment", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserDetail", b =>
                {
                    b.Property<string>("UserDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserDetailID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UserDetail", (string)null);

                    b.HasData(
                        new
                        {
                            UserDetailID = "UD00000001",
                            Address = "123 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7952),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7968),
                            UserID = "US00000001"
                        },
                        new
                        {
                            UserDetailID = "UD00000002",
                            Address = "456 TP HN",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7969),
                            DateOfBirth = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7970),
                            UserID = "US00000002"
                        },
                        new
                        {
                            UserDetailID = "UD00000003",
                            Address = "123 TP NT",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7971),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7971),
                            UserID = "US00000003"
                        },
                        new
                        {
                            UserDetailID = "UD00000004",
                            Address = "1234 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7973),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7973),
                            UserID = "US00000004"
                        },
                        new
                        {
                            UserDetailID = "UD00000005",
                            Address = "1234 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7974),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7975),
                            UserID = "US00000005"
                        },
                        new
                        {
                            UserDetailID = "UD00000006",
                            Address = "1234 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7976),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7976),
                            UserID = "US00000006"
                        },
                        new
                        {
                            UserDetailID = "UD00000007",
                            Address = "1234 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7977),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7978),
                            UserID = "US00000007"
                        },
                        new
                        {
                            UserDetailID = "UD00000008",
                            Address = "1234 TP HCM",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7979),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(7979),
                            UserID = "US00000008"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserEmail", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "EmailTemplateId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("UserEmail", (string)null);
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserProcess", b =>
                {
                    b.Property<int>("UserProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProcessId"));

                    b.Property<string>("CourseContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnrollCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.HasKey("UserProcessId");

                    b.HasIndex("CourseContentId");

                    b.HasIndex("EnrollCourseId");

                    b.ToTable("UserProcess", (string)null);

                    b.HasData(
                        new
                        {
                            UserProcessId = 1,
                            CourseContentId = "CC00000001",
                            EnrollCourseId = "EC00000001",
                            IsComplete = false
                        },
                        new
                        {
                            UserProcessId = 2,
                            CourseContentId = "CC00000002",
                            EnrollCourseId = "EC00000001",
                            IsComplete = false
                        },
                        new
                        {
                            UserProcessId = 3,
                            CourseContentId = "CC00000003",
                            EnrollCourseId = "EC00000001",
                            IsComplete = true
                        },
                        new
                        {
                            UserProcessId = 4,
                            CourseContentId = "CC00000004",
                            EnrollCourseId = "EC00000002",
                            IsComplete = false
                        },
                        new
                        {
                            UserProcessId = 5,
                            CourseContentId = "CC00000005",
                            EnrollCourseId = "EC00000002",
                            IsComplete = true
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Wallet", b =>
                {
                    b.Property<string>("WlId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WlId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);

                    b.HasData(
                        new
                        {
                            WlId = "WL00000001",
                            Amount = 0.0,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8191),
                            UpdatedBy = "system",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8193),
                            UserId = "US00000001"
                        },
                        new
                        {
                            WlId = "WL00000002",
                            Amount = 0.0,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8195),
                            UpdatedBy = "system",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8195),
                            UserId = "US00000002"
                        },
                        new
                        {
                            WlId = "WL00000003",
                            Amount = 0.0,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8197),
                            UpdatedBy = "system",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8197),
                            UserId = "US00000003"
                        },
                        new
                        {
                            WlId = "WL00000004",
                            Amount = 0.0,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8198),
                            UpdatedBy = "system",
                            UpdatedDate = new DateTime(2024, 8, 7, 1, 45, 53, 694, DateTimeKind.Local).AddTicks(8199),
                            UserId = "US00000004"
                        });
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Bookmark", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Course", "Course")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Cart", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Cursus_Data.Models.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CartItem", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Category", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Course", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseComment", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("CourseComments")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.CourseVersion", "CourseVersion")
                        .WithMany("CourseComments")
                        .HasForeignKey("ToCourseVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseContent", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.CourseVersionDetail", "CourseVersionDetail")
                        .WithMany("CourseContents")
                        .HasForeignKey("CourseVersionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseVersionDetail");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseRating", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("CourseRatings")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.CourseVersion", "CourseVersion")
                        .WithMany("CourseRatings")
                        .HasForeignKey("ToCourseVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersion", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Course", "Course")
                        .WithMany("CourseVersions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersionDetail", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.CourseVersion", "CourseVersion")
                        .WithOne("CourseVersionDetails")
                        .HasForeignKey("Cursus_Data.Models.Entities.CourseVersionDetail", "CourseVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseVersion");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersionEmail", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.CourseVersion", "CourseVersion")
                        .WithMany("CourseVersionEmails")
                        .HasForeignKey("CourseVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany("CourseVersionEmails")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseVersion");

                    b.Navigation("EmailTemplate");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EnrollCourse", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Course", "Course")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.CourseVersion", "CourseVersion")
                        .WithMany()
                        .HasForeignKey("CourseVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Image", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.CourseVersionDetail", "CourseVersionDetail")
                        .WithMany("Images")
                        .HasForeignKey("CourseVersionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseVersionDetail");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Instructor", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithOne("Instructor")
                        .HasForeignKey("Cursus_Data.Models.Entities.Instructor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Order", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Course", "Course")
                        .WithMany("OrderItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Payment", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Transaction", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Payment", "Payment")
                        .WithOne("Transaction")
                        .HasForeignKey("Cursus_Data.Models.Entities.Transaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.User", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserBehavior", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("UserBehaviors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserComment", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "FromUser")
                        .WithMany("UserComments")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserDetail", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Cursus_Data.Models.Entities.UserDetail", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserEmail", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany("UserEmails")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.UserProcess", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.CourseContent", "CourseContent")
                        .WithMany("UserProcesses")
                        .HasForeignKey("CourseContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cursus_Data.Models.Entities.EnrollCourse", "EnrollCourse")
                        .WithMany("UserProcesses")
                        .HasForeignKey("EnrollCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseContent");

                    b.Navigation("EnrollCourse");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Wallet", b =>
                {
                    b.HasOne("Cursus_Data.Models.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Cursus_Data.Models.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Course", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("CourseVersions");

                    b.Navigation("EnrollCourses");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseContent", b =>
                {
                    b.Navigation("UserProcesses");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersion", b =>
                {
                    b.Navigation("CourseComments");

                    b.Navigation("CourseRatings");

                    b.Navigation("CourseVersionDetails")
                        .IsRequired();

                    b.Navigation("CourseVersionEmails");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.CourseVersionDetail", b =>
                {
                    b.Navigation("CourseContents");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EmailTemplate", b =>
                {
                    b.Navigation("CourseVersionEmails");

                    b.Navigation("UserEmails");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.EnrollCourse", b =>
                {
                    b.Navigation("UserProcesses");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Payment", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cursus_Data.Models.Entities.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("CourseComments");

                    b.Navigation("CourseRatings");

                    b.Navigation("EnrollCourses");

                    b.Navigation("Instructor")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserBehaviors");

                    b.Navigation("UserComments");

                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UserEmails");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
